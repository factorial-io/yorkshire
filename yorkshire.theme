<?php

/**
 * @file
 * Theme-specific functions.
 */

use Symfony\Cmf\Component\Routing\RouteObjectInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\user\Entity\User;


/**
 * Implements hook_preprocess_html().
 */
function yorkshire_preprocess_html(&$variables) {
  $variables['skin'] = theme_get_setting('skin');
}

/**
 * Implements hook_preprocess_page().
 */
function yorkshire_preprocess_page(&$variables) {
  // Prvious code dit not work sometimes, but bug is goofy and hard to
  // reproduce. So strip code down to get workable solution.
  $uid = $variables['user']->id();
  if ($uid) {

    $variables['user'] = [];
    $variables['user']['uid'] = $uid;
    $variables['user']['picture'] = NULL;
    $variables['user']['created'] = NULL;
  }
}

/**
 * Implements hook_preprocess_block().
 */
function yorkshire_preprocess_block(&$variables) {
  $variables['favicon'] = theme_get_setting('favicon.url');
}

/**
 * Implements hook_preprocess_menu().
 */
function yorkshire_preprocess_menu(&$variables) {
  $icon_setting = explode("\n", theme_get_setting('menu_icons'));
  $icons = [];
  for ($i = 0; $i < count($icon_setting); $i++) {
    $icon_setting[$i] = explode('|', $icon_setting[$i]);
    if (array_key_exists($i, $icon_setting) && count($icon_setting[$i]) >= 2) {
      $icons[$icon_setting[$i][0]] = $icon_setting[$i][1];
    }
  }
  foreach ($variables['items'] as $id => $item) {
    $title = (string) $item['title'];
    if (array_key_exists($title, $icons) && $icons[$title]) {
      $variables['items'][$id]['icon'] = $icons[$title];
    }
  }
}

/**
 * Implements hook_theme_settings_alter().
 */
function yorkshire_form_system_theme_settings_alter(&$form, $form_state) {
  $form['skin'] = array(
    '#type'          => 'select',
    '#title'         => t('yorkshire Skin'),
    '#options' => array(
      "black" => t('Black'),
      "black-light" => t('Black - Light'),
      "blue" => t('Blue'),
      "blue-light" => t('Blue - Light'),
      "green" => t('Green'),
      "green-light" => t('Green - Light'),
      "purple" => t('Purple'),
      "purple-light" => t('Purple - Light'),
      "red" => t('Red'),
      "red-light" => t('Red - Light'),
      "yellow" => t('Yellow'),
      "yellow-light" => t('Yellow - Light'),
    ),
    '#default_value' => theme_get_setting('skin'),
  );
  $form['menu_icons'] = array(
    '#type'          => 'textarea',
    '#title'         => t('Menu Icons'),
    '#default_value' => theme_get_setting('menu_icons'),
    '#description'   => t("<a href='https://fortawesome.github.io/Font-Awesome/icons/' target='_blank'>Font Awesome</a> icon class with associated menu item. One per line. Format: Menu link title|class"),
  );
}

/**
 * Preprocess breadcrumb.
 */
function yorkshire_preprocess_breadcrumb(&$variables) {
  if ($variables['breadcrumb']) {
    $request = \Drupal::request();
    if ($route = $request->attributes->get(RouteObjectInterface::ROUTE_OBJECT)) {
      $variables['breadcrumb'][] = array(
        'text' => \Drupal::service('title_resolver')->getTitle($request, $route),
      );
    }
  }
}

/**
 * Preprocess local action.
 */
function yorkshire_preprocess_menu_local_action(&$variables) {
  $link = $variables['element']['#link'];
  $link += array('localized_options' => array());
  $link['localized_options']['attributes']['class'][] = 'btn';
  $link['localized_options']['attributes']['class'][] = 'btn-block';
  $link['localized_options']['attributes']['class'][] = 'btn-primary';
  $link['localized_options']['attributes']['class'][] = 'fa';
  $link['localized_options']['attributes']['class'][] = 'fa-plus';

  $variables['link'] = array(
    '#type' => 'link',
    '#title' => ' ' . $link['title'],
    '#options' => $link['localized_options'],
    '#url' => $link['url'],
  );
}

/**
 * Implements hook_theme_suggestions_region_alter().
 */
function yorkshire_theme_suggestions_region_alter(&$suggestions, &$variables) {
  if (in_array("region__content", $suggestions)) {
    $page_manager_page = \Drupal::routeMatch()->getRouteObject()->getDefault('page_manager_page');
    if ($page_manager_page) {
      $suggestions[] = 'region__page_manager_page_content';
      $suggestions[] = 'region__page_' . $page_manager_page . '_content';
    }
  }
}

/**
 * Implements hook-theme_suggestions_block_alter().
 */
function yorkshire_theme_suggestions_block_alter(&$suggestions, &$variables) {
  if (in_array("block__system_main_block", $suggestions)) {
    $page_manager_page = \Drupal::routeMatch()->getRouteObject()->getDefault('page_manager_page');
    if ($page_manager_page) {
      $suggestions[] = 'block__page_manager_page_system_main';
      $suggestions[] = 'block__page_' . $page_manager_page . '_system_main';
    }
  }
  elseif (array_key_exists('elements', $variables)
  && array_key_exists('#cache', $variables['elements'])
  && array_key_exists('keys', $variables['elements']['#cache'])
  && in_array("page_manager_block_display", $variables['elements']['#cache']['keys'])) {
    $suggestions[] = 'block__page_manager_page_block';
    $type = $variables['elements']['content']['#block_content'] ?
      $variables['elements']['content']['#block_content']->bundle()
      : $variables['elements']['#configuration']['id'];
    $suggestions[] = 'block__page_manager_page_' . $type;
  }
}
